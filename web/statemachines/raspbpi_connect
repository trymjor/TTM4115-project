#Statemachines
from stmpy import Driver, Machine
from threading import Thread

import paho.mqtt.client as mqtt


class Tick:
    def on_init(self):
        print("Init!")
        self.ticks = 0
        self.tocks = 0

    def send_mqtt_tick(self):
        print("Tick! {}".format(self.ticks))
        self.ticks = self.ticks + 1
        self.mqtt_client.publish("tick", self.ticks)

    def send_mqtt_tock(self):
        print("Tock! {}".format(self.tocks))
        self.tocks = self.tocks + 1
        self.mqtt_client.publish("tock", self.ticks)


# transitions
init = {
    "source": "initial",
    "target": "idle",
}
t = {
    "trigger": "t",
    "source": "countdown",
    "target": "idle",
}

question = {
    "trigger": "question",
    "source": "idle",
    "target": "countdown",
}

buzzer = {
    "trigger": "buzzer",
    "source": "countdown",
    "target": "answer",
}

wrong = {
    "trigger": "wrong",
    "source": "answer",
    "target": "countdown",
}

correct = {
    "trigger": "correct",
    "source": "answer",
    "target": "idle",
}

# States
idle = {
    'name': 'idle'
}

countdown = {
    'name': 'countdown',
    'entry': 'start_timer("t", 20000)'
}

answer = {
    'name': 'answer',
    'entry': 'stop_timer("t")'
}

#init MQTT
class MQTT_Client_1:
    def __init__(self):
        self.count = 0
        self.client = mqtt.Client()
        self.client.on_connect = self.on_connect
        self.client.on_message = self.on_message

    def on_connect(self, client, userdata, flags, rc):
        print("on_connect(): {}".format(mqtt.connack_string(rc)))

    def on_message(self, client, userdata, msg):
        print("on_message(): topic: {}".format(msg.topic))
        print(msg.payload.decode("utf-8"))
        self.stm_driver.send(msg.payload.decode("utf-8"), "quiz")
        self.client.publish("gruppe9/status", "quiz_started")

    def start(self, broker, port):

        print("Connecting to {}:{}".format(broker, port))
        self.client.connect(broker, port)

        self.client.subscribe("gruppe9/room")

        try:
            # line below should not have the () after the function!
            thread = Thread(target=self.client.loop_forever)
            thread.start()
        except KeyboardInterrupt:
            print("Interrupted")
            self.client.disconnect()

#commence connect
broker, port = 'mqtt.item.ntnu.no', 1883
# broker, port = "localhost", 1883



myclient = MQTT_Client_1()
quiz_machine = Machine(transitions=[init, t, question, buzzer, wrong, correct], states=[idle, countdown, answer], obj=myclient, name="quiz")
myclient.stm = quiz_machine

driver = Driver()
driver.add_machine(quiz_machine)

myclient.mqtt_client = myclient.client
myclient.stm_driver = driver

driver.start()
myclient.start(broker, port)

